{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","reportWebVitals.js","index.js"],"names":["Square","value","onClick","className","Board","squares","map","square","i","GAME_STATES","Game","useState","gameState","setGameState","Array","fill","board","setBoard","moveNumber","setMoveNumber","xIsNext","setXisNext","winner","setWinner","useEffect","boardCopy","lines","length","a","b","c","calculateWinner","prev","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAEA,IAMeA,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACb,wBAAQC,UAAS,iBAAYF,GAASC,QAASA,EAA/C,SACGD,KCOUG,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASH,EAAZ,EAAYA,QAAZ,OACZ,qBAAKC,UAAU,QAAf,SACGE,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACX,cAAC,EAAD,CAAgBP,MAAOM,EAAQL,QAAS,kBAAMA,EAAQM,KAAzCA,SCDbC,EACK,UADLA,EAEM,WA8DGC,EA3DF,WAAO,IAAD,EACiBC,mBAAS,MAD1B,mBACVC,EADU,KACCC,EADD,OAESF,mBAASG,MAAM,GAAGC,KAAK,OAFhC,mBAEVC,EAFU,KAEHC,EAFG,OAGmBN,mBAAS,GAH5B,mBAGVO,EAHU,KAGEC,EAHF,OAIaR,oBAAS,GAJtB,mBAIVS,EAJU,KAIDC,EAJC,OAKWV,mBAAS,MALpB,mBAKVW,EALU,KAKFC,EALE,KAMjBC,qBAAU,YACJF,GAbgB,IAaNJ,IACZL,EAAaJ,KAEd,CAACa,EAAQJ,IAyBZ,OACE,qCACE,cAAC,EAAD,CAAOb,QAASW,EAAOd,QAjBP,SAACM,GACdI,GACHC,EAAaJ,GAEf,IAAMgB,EAAS,YAAOT,GAElBS,EAAUjB,KAEdiB,EAAUjB,GAAKY,EAAU,IAAM,IAC/BG,ECvCG,SAAyBlB,GAY9B,IAXA,IAAMqB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGAlB,EAAI,EAAGA,EAAIkB,EAAMC,OAAQnB,IAAK,CAAC,IAAD,cACnBkB,EAAMlB,GADa,GAC9BoB,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIzB,EAAQuB,IAAMvB,EAAQuB,KAAOvB,EAAQwB,IAAMxB,EAAQuB,KAAOvB,EAAQyB,GACpE,OAAOzB,EAAQuB,GAGnB,OAAO,KDqBKG,CAAgBN,IAC1BR,EAASQ,GACTJ,GAAW,SAACW,GAAD,OAAWA,KACtBb,GAAc,SAACa,GAAD,OAAUA,EAAO,SAO5BpB,IAAcH,GACb,mBAAGN,UAAU,aAAb,SACGiB,EAAU,uBAAyB,0BAIvCR,IAAcH,GACb,qCACE,wBAAQN,UAAU,eAAeD,QAnCrB,WAClBW,EAAaJ,GACbQ,EAASH,MAAM,GAAGC,KAAK,OACvBI,EAAc,GACdI,EAAU,MACVF,GAAW,IA8BL,wBAGA,mBAAGlB,UAAU,aAAb,SACGmB,EAAM,kBAAcA,GAAW,8C,MEtD7BW,MAJf,WACE,OAAO,cAAC,EAAD,CAAM9B,UAAU,UCQV+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,CAAK1C,UAAW,UAElB2C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2c474f29.chunk.js","sourcesContent":["import React from 'react'\n\nconst Square = ({ value, onClick }) => (\n  <button className={`square ${value}`} onClick={onClick}>\n    {value}\n  </button>\n)\n\nexport default Square\n","import React from 'react'\nimport Square from './Square'\n\nconst Board = ({ squares, onClick }) => (\n  <div className=\"board\">\n    {squares.map((square, i) => (\n      <Square key={i} value={square} onClick={() => onClick(i)} />\n    ))}\n  </div>\n)\n\nexport default Board\n","import React, { useState, useEffect } from 'react'\nimport { calculateWinner } from '../helpers'\nimport Board from './Board'\n\nconst MAX_MOVE_NUMBER = 9\nconst GAME_STATES = {\n  playing: 'playing',\n  gameOver: 'gameOver',\n}\n\nconst Game = () => {\n  const [gameState, setGameState] = useState(null)\n  const [board, setBoard] = useState(Array(9).fill(null))\n  const [moveNumber, setMoveNumber] = useState(0)\n  const [xIsNext, setXisNext] = useState(true)\n  const [winner, setWinner] = useState(null)\n  useEffect(() => {\n    if (winner || moveNumber === MAX_MOVE_NUMBER) {\n      setGameState(GAME_STATES.gameOver)\n    }\n  }, [winner, moveNumber])\n\n  const restartGame = () => {\n    setGameState(GAME_STATES.playing)\n    setBoard(Array(9).fill(null))\n    setMoveNumber(0)\n    setWinner(null)\n    setXisNext(true)\n  }\n\n  const handleClick = (i) => {\n    if (!gameState) {\n      setGameState(GAME_STATES.playing)\n    }\n    const boardCopy = [...board]\n\n    if (boardCopy[i]) return\n\n    boardCopy[i] = xIsNext ? 'X' : 'O'\n    setWinner(calculateWinner(boardCopy))\n    setBoard(boardCopy)\n    setXisNext((prev) => !prev)\n    setMoveNumber((prev) => prev + 1)\n  }\n\n  return (\n    <>\n      <Board squares={board} onClick={handleClick} />\n\n      {gameState === GAME_STATES.playing && (\n        <p className=\"playerInfo\">\n          {xIsNext ? 'The next player is X' : ' The next player is O'}\n        </p>\n      )}\n\n      {gameState === GAME_STATES.gameOver && (\n        <>\n          <button className=\"startGameBtn\" onClick={restartGame}>\n            Play again\n          </button>\n          <p className=\"playerInfo\">\n            {winner ? `Winner: ${winner}` : 'Nobody won. Try again ðŸ˜Š'}\n          </p>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default Game\n","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ]\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i]\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a]\n    }\n  }\n  return null\n}\n","import Game from './components/Game'\nimport './styles.css'\n\nfunction App() {\n  return <Game className=\"game\" />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className={'app'} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}